version: ~> 1.0
language: c
os: linux
dist: bionic
env:
  global:
   # Encrypted COVERITY_SCAN_TOKEN
   - secure: "RqtJGDribR1z0ulRR5XQUloxPYQe+GT5q4oBm/MuxocfJldQOkacdilhNEXgJyYbuY+MWgSOd/+Pmt97/2RW4Gj2Judb/1Gt1LKbxMTkaabqWQk03awqipipMDz6MFfgUaz+LQBx5SalEbj0O115OgB7UrlLgDjh38j6z4SfVLV2JcFQo1bhnInE0fiVn1n6ynQYo0JPDT4FacF50ro9utjQ5G8X9GZo5yhZEj/HzusZiScvfErmpQihvJMrAXRJlJD62ze29mainPIJcZZJ5STNNMPdUAC3gl+Oq6G8mMRbVUowaTprqh+IM/n3NMyZM2N1TyiECRS/WDMqu1oiMb4j7orOIlN/M5U7HSpKEZcndtAL2H3/X0Qa8IQlNX62hm+jtxUDNN+UMr2Y+xl7erB2Zm/aZmbtgwEl0NTQv/3zHYp85ix1jYVTcYe8IeKmvvS5O9i4Q6fEdWD1u6rklKFNpLbN7qnte1Dfx8t1PwF/xWtKl/qJRVgdR+0sOoxIbIRmmD7um9lHYFFhsni78y4ba4maXjaue6QD486YMQA6ll8aGzdOwaVn36iiDwYae4PbMcvjbqk0bgaVGt+fqSehTqKogYW0XEnC7ziBqqqvZ/zJASv635Rpe8c9yTOcEmV+CAxjWLQMIDtYlzmQQG3Ya+Usc4bEdeLkibdsO9s="
jobs:
  include:
  - name: "Coverity"
    env:
    - CONFIGURE_OPTIONS=""
    - TARGET="coverity"
    compiler: clang
    group: edge
    addons:
      coverity_scan:
        project:
          name: "libyal/libvsmbr"
          description: "Build submitted via Travis CI"
        notification_email: joachim.metz@gmail.com
        build_command_prepend: "./synclibs.sh && ./autogen.sh && ./configure"
        build_command: "make -j4"
        branch_pattern: master
  - name: "Linux with clang"
    env:
    - CONFIGURE_OPTIONS=""
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-clang"
    compiler: clang
    group: edge
  - name: "Linux with gcc"
    env:
    - CONFIGURE_OPTIONS=""
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc"
    compiler: gcc
    group: edge
  - name: "Linux with gcc on s390x (Docker)"
    env:
    - DOCKERHUB_REPO="s390x/ubuntu"
    - DOCKERHUB_TAG="bionic"
    - CONFIGURE_OPTIONS=""
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="docker"
    compiler: gcc
    group: edge
    services:
    - docker
  - name: "Linux with gcc and wide character type (wchar_t) support"
    env:
    - CONFIGURE_OPTIONS="--enable-wide-character-type"
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc-wide-character-type"
    compiler: gcc
    group: edge
  - name: "Linux with gcc without optimization"
    env:
    - CONFIGURE_OPTIONS="--enable-shared=no --enable-wide-character-type"
    - CFLAGS="--coverage -O0"
    - CPPFLAGS="-DOPTIMIZATION_DISABLED"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc-no-optimization"
    compiler: gcc
    group: edge
  - name: "Linux with gcc and Python module"
    env:
    - CONFIGURE_OPTIONS="--enable-python"
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc-python"
    compiler: gcc
    group: edge
  - name: "Linux with gcc and Python 2 module"
    env:
    - CONFIGURE_OPTIONS="--enable-python2"
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - PYTHON_VERSION=2
    - TARGET="linux-gcc-python2"
    compiler: gcc
    group: edge
  - name: "Linux with gcc and Python 3 module"
    env:
    - CONFIGURE_OPTIONS="--enable-python3"
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - PYTHON_VERSION=3
    - TARGET="linux-gcc-python3"
    compiler: gcc
    group: edge
  - name: "Linux with gcc and Python 2 module (setup.py)"
    env:
    - TARGET="linux-gcc-python-setup-py"
    compiler: gcc
    group: edge
    python: 2.7
  - name: "Linux with gcc and Python 3 module (setup.py)"
    env:
    - TARGET="linux-gcc-python-setup-py"
    compiler: gcc
    group: edge
    python: 3.6
  - name: "Linux with gcc and shared libraries"
    env:
    - CONFIGURE_OPTIONS=""
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc-shared"
    compiler: gcc
    group: edge
  - name: "Linux with gcc, shared libraries and wide character type (wchar_t) support"
    env:
    - CONFIGURE_OPTIONS="--enable-wide-character-type"
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc-shared-wide-character-type"
    compiler: gcc
    group: edge
  - name: "Linux with gcc and static executables support"
    env:
    - CONFIGURE_OPTIONS="--enable-static-executables=yes --enable-multi-threading-support=no"
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc-static-executables"
    compiler: gcc
    group: edge
  - name: "Mac OS 10.14 with clang"
    env:
    - CONFIGURE_OPTIONS=""
    - TARGET="macos-clang"
    compiler: clang
    os: osx
    osx_image: xcode11
  - name: "Mac OS 10.14 with gcc"
    env:
    - CONFIGURE_OPTIONS=""
    - TARGET="macos-gcc"
    compiler: gcc
    os: osx
    osx_image: xcode11
  - name: "Mac OS 10.14 with gcc and Python module"
    env:
    - CONFIGURE_OPTIONS="--enable-python"
    - TARGET="macos-gcc-python"
    compiler: gcc
    os: osx
    osx_image: xcode11
  - name: "Mac OS 10.14 with gcc and Python 2 module"
    env:
    - CONFIGURE_OPTIONS="--enable-python2"
    - PYTHON_VERSION=2
    - TARGET="macos-gcc-python2"
    compiler: gcc
    os: osx
    osx_image: xcode11
  - name: "Mac OS 10.14 with gcc and Python 2 module (setup.py)"
    env:
    - TARGET="macos-gcc-python-setup-py"
    compiler: gcc
    os: osx
    osx_image: xcode11
  - name: "Mac OS 10.14 with gcc and Python 3.8 module (setup.py)"
    env:
    - TARGET="macos-gcc-python-setup-py38"
    compiler: gcc
    os: osx
    osx_image: xcode11
    language: shell
  - name: "Mac OS 10.14 with gcc and Python module and pkgbuild"
    env:
    - CONFIGURE_OPTIONS="--disable-dependency-tracking --prefix=/usr/local --enable-python --with-pyprefix"
    - TARGET="macos-gcc-pkgbuild"
    compiler: gcc
    os: osx
    osx_image: xcode11
before_install:
- .travis/before_install.sh
install:
- .travis/install.sh
script:
- .travis/script.sh
after_success:
- if test ${TARGET} = "linux-gcc-no-optimization"; then
    for DIRECTORY in `find . -maxdepth 1 -type d`; do (cd ${DIRECTORY} && find . -maxdepth 1 -name \*.gcno -type f -exec gcov -pb {} \;) done;
    curl -o codecov.sh -s https://codecov.io/bash && /bin/bash ./codecov.sh -n ${TARGET} -X gcov;
  fi
- if test ${TARGET} = "macos-gcc-python-setup-py38" && test -n "${TRAVIS_TAG}"; then
    python3 -m twine upload dist/*.whl --username __token__ --password ${PYPI_TOKEN} --skip-existing;
  fi

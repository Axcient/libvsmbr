/*
 * Library to access the Master Boot Record (MBR) volume system
 *
 * Copyright (C) 2010-2018, Joachim Metz <joachim.metz@gmail.com>
 *
 * Refer to AUTHORS for acknowledgements.
 *
 * This software is free software: you can redistribute it and/or modisoy
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this software.  If not, see <http://www.gnu.org/licenses/>.
 */

#if !defined( _LIBVSMBR_H )
#define _LIBVSMBR_H

#include <libvsmbr/codepage.h>
#include <libvsmbr/definitions.h>
#include <libvsmbr/error.h>
#include <libvsmbr/extern.h>
#include <libvsmbr/features.h>
#include <libvsmbr/types.h>

#include <stdio.h>

#if defined( LIBVSMBR_HAVE_BFIO )
#include <libbfio.h>
#endif

#if defined( __cplusplus )
extern "C" {
#endif

/* -------------------------------------------------------------------------
 * Support functions
 * ------------------------------------------------------------------------- */

/* Returns the library version
 */
LIBVSMBR_EXTERN \
const char *libvsmbr_get_version(
             void );

/* Returns the access flags for reading
 */
LIBVSMBR_EXTERN \
int libvsmbr_get_access_flags_read(
     void );

/* Returns the access flags for reading and writing
 */
LIBVSMBR_EXTERN \
int libvsmbr_get_access_flags_read_write(
     void );

/* Returns the access flags for writing
 */
LIBVSMBR_EXTERN \
int libvsmbr_get_access_flags_write(
     void );

/* Retrieves the narrow system string codepage
 * A value of 0 represents no codepage, UTF-8 encoding is used instead
 * Returns 1 if successful or -1 on error
 */
LIBVSMBR_EXTERN \
int libvsmbr_get_codepage(
     int *codepage,
     libvsmbr_error_t **error );

/* Sets the narrow system string codepage
 * A value of 0 represents no codepage, UTF-8 encoding is used instead
 * Returns 1 if successful or -1 on error
 */
LIBVSMBR_EXTERN \
int libvsmbr_set_codepage(
     int codepage,
     libvsmbr_error_t **error );

/* Determines if a file contains a MBR volume signature
 * Returns 1 if true, 0 if not or -1 on error
 */
LIBVSMBR_EXTERN \
int libvsmbr_check_volume_signature(
     const char *filename,
     libvsmbr_error_t **error );

#if defined( LIBVSMBR_HAVE_WIDE_CHARACTER_TYPE )

/* Determines if a file contains a MBR volume signature
 * Returns 1 if true, 0 if not or -1 on error
 */
LIBVSMBR_EXTERN \
int libvsmbr_check_volume_signature_wide(
     const wchar_t *filename,
     libvsmbr_error_t **error );

#endif /* defined( LIBVSMBR_HAVE_WIDE_CHARACTER_TYPE ) */

#if defined( LIBVSMBR_HAVE_BFIO )

/* Determines if a file contains a MBR volume signature using a Basic File IO (bfio) handle
 * Returns 1 if true, 0 if not or -1 on error
 */
LIBVSMBR_EXTERN \
int libvsmbr_check_volume_signature_file_io_handle(
     libbfio_handle_t *file_io_handle,
     libvsmbr_error_t **error );

#endif /* defined( LIBVSMBR_HAVE_BFIO ) */

/* -------------------------------------------------------------------------
 * Notify functions
 * ------------------------------------------------------------------------- */

/* Sets the verbose notification
 */
LIBVSMBR_EXTERN \
void libvsmbr_notify_set_verbose(
      int verbose );

/* Sets the notification stream
 * Returns 1 if successful or -1 on error
 */
LIBVSMBR_EXTERN \
int libvsmbr_notify_set_stream(
     FILE *stream,
     libvsmbr_error_t **error );

/* Opens the notification stream using a filename
 * The stream is opened in append mode
 * Returns 1 if successful or -1 on error
 */
LIBVSMBR_EXTERN \
int libvsmbr_notify_stream_open(
     const char *filename,
     libvsmbr_error_t **error );

/* Closes the notification stream if opened using a filename
 * Returns 0 if successful or -1 on error
 */
LIBVSMBR_EXTERN \
int libvsmbr_notify_stream_close(
     libvsmbr_error_t **error );

/* -------------------------------------------------------------------------
 * Error functions
 * ------------------------------------------------------------------------- */

/* Frees an error
 */
LIBVSMBR_EXTERN \
void libvsmbr_error_free(
      libvsmbr_error_t **error );

/* Prints a descriptive string of the error to the stream
 * Returns the number of printed characters if successful or -1 on error
 */
LIBVSMBR_EXTERN \
int libvsmbr_error_fprint(
     libvsmbr_error_t *error,
     FILE *stream );

/* Prints a descriptive string of the error to the string
 * The end-of-string character is not included in the return value
 * Returns the number of printed characters if successful or -1 on error
 */
LIBVSMBR_EXTERN \
int libvsmbr_error_sprint(
     libvsmbr_error_t *error,
     char *string,
     size_t size );

/* Prints a backtrace of the error to the stream
 * Returns the number of printed characters if successful or -1 on error
 */
LIBVSMBR_EXTERN \
int libvsmbr_error_backtrace_fprint(
     libvsmbr_error_t *error,
     FILE *stream );

/* Prints a backtrace of the error to the string
 * The end-of-string character is not included in the return value
 * Returns the number of printed characters if successful or -1 on error
 */
LIBVSMBR_EXTERN \
int libvsmbr_error_backtrace_sprint(
     libvsmbr_error_t *error,
     char *string,
     size_t size );

/* -------------------------------------------------------------------------
 * Handle functions
 * ------------------------------------------------------------------------- */

/* Creates a handle
 * Make sure the value handle is referencing, is set to NULL
 * Returns 1 if successful or -1 on error
 */
LIBVSMBR_EXTERN \
int libvsmbr_handle_initialize(
     libvsmbr_handle_t **handle,
     libvsmbr_error_t **error );

/* Frees a handle
 * Returns 1 if successful or -1 on error
 */
LIBVSMBR_EXTERN \
int libvsmbr_handle_free(
     libvsmbr_handle_t **handle,
     libvsmbr_error_t **error );

/* Signals a handle to abort its current activity
 * Returns 1 if successful or -1 on error
 */
LIBVSMBR_EXTERN \
int libvsmbr_handle_signal_abort(
     libvsmbr_handle_t *handle,
     libvsmbr_error_t **error );

/* Opens a handle
 * Returns 1 if successful or -1 on error
 */
LIBVSMBR_EXTERN \
int libvsmbr_handle_open(
     libvsmbr_handle_t *handle,
     const char *filename,
     int access_flags,
     libvsmbr_error_t **error );

#if defined( LIBVSMBR_HAVE_WIDE_CHARACTER_TYPE )

/* Opens a handle
 * Returns 1 if successful or -1 on error
 */
LIBVSMBR_EXTERN \
int libvsmbr_handle_open_wide(
     libvsmbr_handle_t *handle,
     const wchar_t *filename,
     int access_flags,
     libvsmbr_error_t **error );

#endif /* defined( LIBVSMBR_HAVE_WIDE_CHARACTER_TYPE ) */

#if defined( LIBVSMBR_HAVE_BFIO )

/* Opens a handle using a Basic File IO (bfio) handle
 * Returns 1 if successful or -1 on error
 */
LIBVSMBR_EXTERN \
int libvsmbr_handle_open_handle_io_handle(
     libvsmbr_handle_t *handle,
     libbfio_handle_t *file_io_handle,
     int access_flags,
     libvsmbr_error_t **error );

#endif /* defined( LIBVSMBR_HAVE_BFIO ) */

/* Closes a handle
 * Returns 0 if successful or -1 on error
 */
LIBVSMBR_EXTERN \
int libvsmbr_handle_close(
     libvsmbr_handle_t *handle,
     libvsmbr_error_t **error );

/* Retrieves the number of partitions
 * Returns 1 if successful or -1 on error
 */
int libvsmbr_handle_get_number_of_partitions(
     libvsmbr_handle_t *handle,
     int *number_of_partitions,
     libvsmbr_error_t **error );

/* Retrieves a specific partition
 * Returns 1 if successful or -1 on error
 */
int libvsmbr_handle_get_partition_by_index(
     libvsmbr_handle_t *handle,
     int partition_index,
     libvsmbr_partition_t **partition,
     libvsmbr_error_t **error );

/* -------------------------------------------------------------------------
 * Partition functions
 * ------------------------------------------------------------------------- */

/* Frees a partition
 * Returns 1 if successful or -1 on error
 */
LIBVSMBR_EXTERN \
int libvsmbr_partition_free(
     libvsmbr_partition_t **partition,
     libvsmbr_error_t **error );

#if defined( __cplusplus )
}
#endif

#endif /* !defined( _LIBVSMBR_H ) */

